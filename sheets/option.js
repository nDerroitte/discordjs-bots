const { GoogleSpreadsheet } = require('google-spreadsheet');
const { client_email, private_key } = require('./secret.json');

module.exports =
{

    async auth(){
        // Initialize the sheet - doc ID is the long id in the sheets URL
        const doc = new GoogleSpreadsheet('1hyfXKU6drUgTut-rIte_3Vw-tZ2o7PgLdALsHcC3b40');

        // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
        await doc.useServiceAccountAuth({
          // env var values are copied from service account credentials generated by google
          // see "Authentication" section in docs for more info
          client_email: client_email,
          private_key: private_key,
        });

        await doc.loadInfo(); // loads document properties and worksheets
        return doc
    },
    async loadPermission() {
        doc = await module.exports.auth();
        const sheet  = await doc.sheetsByTitle["BotCommandsPermissions"]

        await sheet.loadCells('B3:H25');
        var permissions = {
            "apply" : [],
            "validate_boost" : [],
            "validate_all_boost" : []
        }
        for(let i = 3; i < 26 ; i++)
        {
            val = sheet.getCellByA1(`F${i}`).value
            if(val)
                permissions["apply"].push(val)
            val = sheet.getCellByA1(`D${i}`).value
            if(val)
                permissions["validate_all_boost"].push(val)
            val = sheet.getCellByA1(`B${i}`).value
            if(val)
                permissions["validate_boost"].push(val)
        }
        return permissions
    },

    async loadNameOptions() {
        doc = await module.exports.auth();
        const sheet  = await doc.sheetsByTitle["NameOptions"]
        await sheet.loadCells('F2');
        const nick_length = sheet.getCellByA1('F2').value;
        await sheet.loadCells(`A3:C${nick_length}`);
        var nicks = {}
        var ignoredSymbols = []
        for(let i = 3; i < nick_length + 1 ; i++)
        {
            val = sheet.getCellByA1(`A${i}`).value
            val2 = sheet.getCellByA1(`B${i}`).value

            if(val && val2)
                nicks[val] = val2
            val = sheet.getCellByA1(`C${i}`).value
            if(val)
                ignoredSymbols.push(val.trim())
        }
        return [ignoredSymbols, nicks]
    },
    async loadConnectedRealms()
    {
        doc = await module.exports.auth();
        const sheet  = await doc.sheetsByTitle["ConnectedRealms"]
        await sheet.loadCells(`A2:A105`);
        var realms = []
        for(let i = 2; i < 101 ; i++)
        {
            val = sheet.getCellByA1(`A${i.toString()}`).value
            if(val)
            {
                current_realms = val.split(",")
                for(j = 0; j <current_realms.length ; j ++)
                {
                    current_realms[j] = current_realms[j].trim()
                    current_realms[j] = current_realms[j].toLowerCase()
                }
                realms.push(current_realms)
            }
        }
        return realms
    }
}
